/*
 * Copyright (C) 1998-2014 ALPS Collaboration. See COPYRIGHT.TXT
 * All rights reserved. Use is subject to license terms. See LICENSE.TXT
 * For use in publications, see ACKNOWLEDGE.TXT
 */

#pragma once
//
// use boost filesystem version 2 (nessesary from boost 1.46 upwards)
//
#define BOOST_FILESYSTEM_VERSION 3
#define BOOST_FILESYSTEM_DEPRECATED

//
// C headers
//

// Define to 1 if you have rpc/rpc.h and rpc/xdr.h
#cmakedefine ALPS_HAVE_RPC_XDR_H

// Define to 1 if you have the <stdarg.h> header file.
#cmakedefine ALPS_HAVE_STDARG_H

// Define to 1 if you have the <sys/stat.h> header file.
#cmakedefine ALPS_HAVE_SYS_STAT_H

// Define to 1 if you have the <sys/systeminfo.h> header file.
#cmakedefine ALPS_HAVE_SYS_SYSTEMINFO_H

// Define to 1 if you have the <sys/types.h> header file.
#cmakedefine ALPS_HAVE_SYS_TYPES_H

// Define to 1 if you have the <unistd.h> header file.
#cmakedefine ALPS_HAVE_UNISTD_H

// Define to 1 if you have the <windows.h> header file.
#cmakedefine ALPS_HAVE_WINDOWS_H

// If defined, the openmpi specific ulfm is used.
#cmakedefine ALPS_OPENMPI_ULFM

//
// Libraries
//

// Define to 1 if you have the PTHREAD library
#cmakedefine ALPS_HAVE_PTHREAD

// Define to 1 if you have the MPI library
#cmakedefine ALPS_HAVE_MPI

// Define to 1 if you have the HDF5 library
#cmakedefine ALPS_HAVE_HDF5

// Define to 1 if you have the HDF5 library with parallel(MPI) support
#cmakedefine ALPS_HAVE_HDF5_PARALLEL

// Define to 1 if you have the Boost.MPI library
#cmakedefine ALPS_HAVE_BOOST_MPI

// Define to 1 if you have the Boost.Signals library
#cmakedefine ALPS_HAVE_BOOST_SIGNALS

// Define to 1 if you have the Boost.ThreadMPI library
#cmakedefine ALPS_HAVE_BOOST_THREAD

// Define to 1 if you have wchar support in Boost.Regex and Boost.Serialization
#cmakedefine ALPS_HAVE_BOOST_WCHAR

//
// BLAS and LAPACK
//

// Define if you have BLAS library
#cmakedefine ALPS_HAVE_BLAS

// Define if you have LAPACK library
#cmakedefine ALPS_HAVE_LAPACK

// Define if you have Intel Math Kernel Library
#cmakedefine ALPS_HAVE_MKL

// Define if you have the Digital Extended Math Library
#cmakedefine ALPS_HAVE_DXML

// Define if you have SGI SCSL Library
#cmakedefine ALPS_HAVE_SCSL

// Define if you have Mac OS X vecLib framework
#cmakedefine ALPS_HAVE_VECLIB

// Define if you have IBM ESSL Library
#cmakedefine ALPS_HAVE_ESSL

// Define if you have ATLAS library
#cmakedefine ALPS_HAVE_ATLAS

// Set 8-byte integers for Boost bindings if needed
#cmakedefine BIND_FORTRAN_INTEGER_8

//
// XML parser
//

// Define to 1 if you use Expat XML parser by James Clark.
#cmakedefine ALPS_HAVE_EXPAT_PARSER

// Define to 1 if you use Xerces C++ XML parser by Apache Software Foundation.
#cmakedefine ALPS_HAVE_XERCES_PARSER

//
// Python
//

// Define to 1 if you have Python on your system.
#cmakedefine ALPS_HAVE_PYTHON

//
// OpenMP
//

// Define to 1 if OpenMP Worker is supported in ALPS/parpack scheduler
#cmakedefine ALPS_ENABLE_OPENMP_WORKER

//
// Introduce [int,uint]*_t into alps namespace
//

#ifndef _USE_MATH_DEFINES // define const in math.h
# define _USE_MATH_DEFINES
#endif

#include <boost/cstdint.hpp>

namespace alps {

using boost::int8_t;
using boost::int_least8_t;
using boost::int_fast8_t;
using boost::uint8_t;
using boost::uint_least8_t;
using boost::uint_fast8_t;

using boost::int16_t;
using boost::int_least16_t;
using boost::int_fast16_t;
using boost::uint16_t;
using boost::uint_least16_t;
using boost::uint_fast16_t;

using boost::int32_t;
using boost::int_least32_t;
using boost::int_fast32_t;
using boost::uint32_t;
using boost::uint_least32_t;
using boost::uint_fast32_t;

#ifndef BOOST_NO_INT64_T

using boost::int64_t;
using boost::int_least64_t;
using boost::int_fast64_t;
using boost::uint64_t;
using boost::uint_least64_t;
using boost::uint_fast64_t;

#endif

} // end namespace alps

#include <boost/config.hpp>

#ifndef BOOST_NO_VOID_RETURNS
# define ALPS_DUMMY_VOID void
# define ALPS_RETURN_VOID
#else
# define ALPS_DUMMY_VOID bool
# define ALPS_RETURN_VOID return true;
#endif

//
// for Microsoft Visual C++
//

#if defined(BOOST_HAS_DECLSPEC)
# if defined(ALPS_EXPORTS)
#  define ALPS_DECL __declspec(dllexport)
#  define ALPS_TEMPL_DECL __declspec(dllexport)
# else
#  define ALPS_DECL __declspec(dllimport)
#  define ALPS_TEMPL_DECL
# endif
# if defined(PYALPS_EXPORTS)
#  define PYALPS_DECL __declspec(dllexport)
#  define PYALPS_TEMPL_DECL __declspec(dllexport)
# else
#  define PYALPS_DECL __declspec(dllimport)
#  define PYALPS_TEMPL_DECL
# endif
#else
# define ALPS_TEMPL_DECL
# define ALPS_DECL
# define PYALPS_TEMPL_DECL
# define PYALPS_DECL
#endif

//
// Enable HDF5 checkpoints: no ALPS checkpoint data is written into XDR files 
// anymore, but they can still be read
//
#ifdef ALPS_HAVE_HDF5
#  define ALPS_ONLY_HDF5
#endif


#ifdef BOOST_MSVC
#define BOOST_NUMERIC_BINDINGS_USE_COMPLEX_STRUCT
#endif

// if defined, no threading libraries are included
#define ALPS_SINGLE_THREAD

// do not throw an error on accessing a not existing paht in a hdf5 file
// #define ALPS_HDF5_READ_GREEDY

// do not throw an error if closing a hdf5 gets dirty (e.g in Python)
// #define ALPS_HDF5_CLOSE_GREEDY

// blocksize in compressed hdf5. Default: 32
#ifndef ALPS_HDF5_SZIP_BLOCK_SIZE
    #define ALPS_HDF5_SZIP_BLOCK_SIZE 32
#endif

// maximal number of stack frames displayed in stacktrace. Default 63
#ifndef ALPS_MAX_FRAMES
    #define ALPS_MAX_FRAMES 63
#endif

// prevent the signal object from registering signals
#ifdef BOOST_MSVC
    #define ALPS_NO_SIGNALS
#endif

// do not print a stacktrace in error messages
// we will always print stacktrace. This is how it was done in legacy ALPS:
//#ifndef __GNUC__
//    #define ALPS_NO_STACKTRACE
//#endif

#ifndef ALPS_ACCUMULATOR_VALUE_TYPES
    #define ALPS_ACCUMULATOR_VALUE_TYPES float, double, long double, std::vector<float>, std::vector<double>, std::vector<long double>
    #define ALPS_ACCUMULATOR_VALUE_TYPES_SIZE 6

    // #define ALPS_ACCUMULATOR_VALUE_TYPES double, std::vector<double>, alps::multi_array<double, 2>, alps::multi_array<double, 3>
#endif

