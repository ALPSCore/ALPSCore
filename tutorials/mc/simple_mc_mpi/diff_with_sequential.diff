diff -Bb -u -r ../simple_mc/CMakeLists.txt ./CMakeLists.txt
--- ../simple_mc/CMakeLists.txt	2017-11-06 10:24:45.705674940 -0500
+++ ./CMakeLists.txt	2017-11-06 10:24:45.705674940 -0500
@@ -1,5 +1,5 @@
 cmake_minimum_required(VERSION 3.0)
-project(simple_mc CXX)
+project(simple_mc_mpi CXX)
 
 # Not strictly necessary, but will create executables that are
 # aware of ALPSCore location
@@ -13,5 +13,10 @@
 # Otherwise, point ALPSCore_DIR environment variable to the ALPScore installation tree.
 find_package(ALPSCore 1.0 REQUIRED mc accumulators params)
 
+# Check if your ALPSCore is compiled with MPI support.
+if (NOT ALPSCore_HAS_MPI)
+  message(FATAL_ERROR "ALPSCore was built without MPI support.")
+endif()
+
 # Use ALPSCore_LIBRARIES variable to link to ALPSCore 
 target_link_libraries(${PROJECT_NAME} ${ALPSCore_LIBRARIES})
diff -Bb -u -r ../simple_mc/main.cpp ./main.cpp
--- ../simple_mc/main.cpp	2017-04-19 19:51:48.934450404 -0400
+++ ./main.cpp	2017-04-19 19:51:48.934450404 -0400
@@ -9,6 +9,7 @@
 #include <alps/mc/api.hpp>
 #include <alps/mc/mcbase.hpp>
 #include <alps/mc/stop_callback.hpp>
+#include <alps/mc/mpiadapter.hpp>
 
 // Simulation class
 // We extend alps::mcbase, which is the base class of all Monte Carlo simulations.
@@ -85,9 +86,17 @@
  */
 int main(int argc, char** argv)
 {
+    // Use the MPI adapter class instead of the original class:
+    typedef alps::mcmpiadapter<my_sim_type> my_sim_type;
+
+    // Initialize the MPI environment:
+    alps::mpi::environment env(argc,argv);
+    // Obtain the MPI communicator (MPI_COMM_WORLD by default):
+    alps::mpi::communicator comm;
+    
     // Creates the parameters for the simulation
     std::cout << "Initializing parameters..." << std::endl;
-    alps::parameters_type<my_sim_type>::type params(argc, argv);
+    alps::parameters_type<my_sim_type>::type params(argc, argv, comm);
 
     // Define the parameters for our simulation, including the ones for the
     // base class
@@ -98,19 +107,21 @@
     }
     
     // Create and run the simulation
-    std::cout << "Running simulation..." << std::endl;
-    my_sim_type my_sim(params);
+    std::cout << "Running simulation on rank " << comm.rank() << std::endl;
+    my_sim_type my_sim(params,comm);
     my_sim.run(alps::stop_callback(5));
 
     // Collect the results from the simulation
-    std::cout << "Collecting results..." << std::endl;
+    std::cout << "Rank " << comm.rank() << " has finished. Collecting results..." << std::endl;
     alps::results_type<my_sim_type>::type results = alps::collect_results(my_sim);
 
-    // Print the mean and the standard deviation
+    // Print the mean and the standard deviation.
+    // Only master has all the results!
+    if (comm.rank()==0) {
     std::cout << "Results:" << std::endl;
     std::cout << "The simulation ran for " << results["X"].count() << " steps." << std::endl;
     std::cout << " mean: " << results["X"] << std::endl;
     std::cout << " variance: " << results["X2"] - results["X"]*results["X"] << std::endl;
-
+    }
     return 0;
 }
