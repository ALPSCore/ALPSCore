
/// Get a build dir based on name
def build_dir_name(name) { "build.tmp/${name}" }

/// Calling shell for the particular phase
def call_phase(phase, name, compiler, mpilib) {
    sh """export PHASE=${phase}
          export COMPILER=${compiler}
          export MPI_VERSION=${mpilib}
          export BUILD_DIR='${build_dir_name(name)}'
          ./common/build/build.pauli.jenkins.sh
       """
}

/// Sub-pipeline for a project; returns closure defining the sub-pipe
def sub_pipe(name, compiler, mpilib) {
    { ->
        stage("Sub-pipeline with ${name}") {
            stash(name: name)
            node("master-node") {
                unstash(name: name)
                
                stage("Config") {
                    echo "Config step with compiler=${compiler} mpilib=${mpilib}"
                    call_phase('cmake', name, compiler, mpilib)
                }

                stage("Build") {
                    echo "Build step with compiler=${compiler} mpilib=${mpilib}"
                    call_phase('make', name, compiler, mpilib)
                }

                stage("Test")  {
                    echo "Test step with compiler=${compiler} mpilib=${mpilib}"
                    call_phase('test', name, compiler, mpilib)
                    junit "${build_dir_name(name)}/*/test/*.xml"
                }
                
                stage("Install")  {
                    echo "Install step with compiler=${compiler} mpilib=${mpilib}"
                    call_phase('install', name, compiler, mpilib)
                    zip archive: true, dir: "${build_dir_name(name)}/install", glob: '', zipFile: "${build_dir_name(name)}/alpscore.zip"
                    fingerprint "${build_dir_name(name)}/alpscore.zip"
                }
            }
        }
    }
}


pipeline {
    agent {
        node {
            label 'master-node'
        }

    }

    parameters {
        string(name: 'COMPILERS', defaultValue: 'gcc_4.8.5,gcc_5.4.0,clang_3.4.2,clang_5.0.1,intel_18.0.5', description: 'Compilers to use')
        string(name: 'MPI_VERSIONS', defaultValue: 'MPI_OFF,OpenMPI', description: 'MPI versions to link with')
    }

    stages {
        stage('Parallel stages') {
            steps {
                script {

                    projects = [:]
                    for (comp in params.COMPILERS.tokenize(',')) {
                        for (mpilib in params.MPI_VERSIONS.tokenize(',')) {

                            // Filter out combinations that don't work with MPI
                            if (comp=="gcc_5.4.0" || comp=="intel_18.0.5" || mpilib=="MPI_OFF") {
                                key="compiler=${comp}_mpilib=${mpilib}"
                                projects[key]=sub_pipe(key, comp, mpilib)
                            }

                        }
                    }
                    echo "DEBUG: Projects: ${projects}"
                    parallel (projects)

                } // end script
            } // end steps
        } // end stage
    } // end stages
    post {
        always {
            echo 'DEBUG: Build is over'
        }
        success {
            echo 'DEBUG: Build successful'
        }
        unstable {
            echo 'DEBUG: Build is unstable'
            emailext to: 'galexv+jenkins.status@umich.edu',
                     recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
                     subject: 'ALPSCore: Jenkins build is unstable',
                     attachLog: true,
                     compressLog: true,
                     body: "ALPSCore build is unstable: see attached log"
        }
        failure {
            echo 'DEBUG: Build failed'
            emailext to: 'galexv+jenkins.status@umich.edu',
                     recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
                     subject: 'ALPSCore: Jenkins build has failed',
                     attachLog: true,
                     compressLog: true,
                     body: "ALPSCore build has failed: see attached log"
        }
        changed {
            echo 'DEBUG: Build status changed'
            emailext to: 'galexv+jenkins.status@umich.edu',
                     recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
                     subject: 'ALPSCore: Jenkins build status changed',
                     attachLog: true,
                     compressLog: true,
                     body: "ALPSCore build status changed"
        }
        
    }
}
