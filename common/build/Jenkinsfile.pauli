
/// Get a build dir based on name
def build_dir_name(name) { "build.tmp/${name}" }

/// Calling shell for the particular phase
def call_phase(phase, name, compiler, mpilib) {
    sh """export PHASE=${phase}
          export COMPILER=${compiler}
          export MPI_VERSION=${mpilib}
          export BUILD_DIR='${build_dir_name(name)}'
          ./common/build/build.pauli.jenkins.sh
       """
}

/// Report status to GitHub
void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/ALPSCore/ALPSCore"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

/// Sub-pipeline for a project; returns closure defining the sub-pipe
def sub_pipe(name, compiler, mpilib) {
    { ->
        stage("Sub-pipeline with ${name}") {
            stash(name: name)
            node("master-node") {
                unstash(name: name)

                stage("Config") {
                    echo "Config step with compiler=${compiler} mpilib=${mpilib}"
                    call_phase('cmake', name, compiler, mpilib)
                }

                stage("Build") {
                    echo "Build step with compiler=${compiler} mpilib=${mpilib}"
                    call_phase('make', name, compiler, mpilib)
                }

                stage("Test")  {
                    echo "Test step with compiler=${compiler} mpilib=${mpilib}"
                    call_phase('test', name, compiler, mpilib)
                    junit "${build_dir_name(name)}/*/test/*.xml"
                }

                stage("Install")  {
                    echo "Install step with compiler=${compiler} mpilib=${mpilib}"
                    call_phase('install', name, compiler, mpilib)
                    zip archive: true, dir: "${build_dir_name(name)}/install", glob: '', zipFile: "${build_dir_name(name)}/alpscore.zip"
                    fingerprint "${build_dir_name(name)}/alpscore.zip"
                }
            }
        }
    }
}


pipeline {
    agent {
        node {
            label 'master-node'
        }

    }

    parameters {
        string(name: 'COMPILERS', defaultValue: 'aocc_4.0.0,gcc_12.2.0', description: 'Compilers to use')
        string(name: 'MPI_VERSIONS', defaultValue: 'MPI_OFF,OpenMPI', description: 'MPI versions to link with')
    }

    stages {
        stage('Status update') {
            steps {
                echo 'DEBUG: Sending PENDING status to GitHub'
                setBuildStatus("Jenkins build has started", 'PENDING')
            }
        }
        stage('Parallel stages') {
            steps {
                script {

                    projects = [:]
                    for (comp in params.COMPILERS.tokenize(',')) {
                        for (mpilib in params.MPI_VERSIONS.tokenize(',')) {

                            key="compiler=${comp}_mpilib=${mpilib}"
                            projects[key]=sub_pipe(key, comp, mpilib)

                        }
                    }
                    echo "DEBUG: Projects: ${projects}"
                    parallel (projects)

                } // end script
            } // end steps
        } // end stage
    } // end stages
    post {
        always {
            echo 'DEBUG: Build is over'
        }
        success {
            echo 'DEBUG: Build successful'
            setBuildStatus('Jenkins build is successful', 'SUCCESS')
        }
        unstable {
            echo 'DEBUG: Build is unstable'
            setBuildStatus('Jenkins build is successful', 'ERROR')
            //emailext to: 'galexv+jenkins.status@umich.edu',
            //         recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
            //         subject: 'ALPSCore: Jenkins build is unstable',
            //         attachLog: true,
            //         compressLog: true,
            //         body: "ALPSCore build is unstable: see attached log"
        }
        failure {
            echo 'DEBUG: Build failed'
            setBuildStatus('Jenkins build failed', 'FAILURE')
            //emailext to: 'galexv+jenkins.status@umich.edu',
            //         recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
            //         subject: 'ALPSCore: Jenkins build has failed',
            //         attachLog: true,
            //         compressLog: true,
            //         body: "ALPSCore build has failed: see attached log"
        }
        changed {
            echo 'DEBUG: Build status changed'
            //emailext to: 'galexv+jenkins.status@umich.edu',
            //         recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
            //         subject: 'ALPSCore: Jenkins build status changed',
            //         attachLog: true,
            //         compressLog: true,
            //         body: "ALPSCore build status changed"
        }

    }
}
