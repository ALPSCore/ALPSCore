#  Try to find ALPSCore.
#  Affected by the following variables:
#  ALPS_FORCE_CXX_STD=C++11|C++14|custom    - Override the request for the C++capabilities
#                                               for the dependent targets.
#  ALPS_FORCE_NO_COMPILER_CHECK             - If true, override complier mismatch check.
#
#  Once done this will define
#  ALPSCore_FOUND         - System has ALPSCore
#  ALPSCore_LIBRARIES     - The ALPSCore libraries (imported targets)
#  ALPSCore_HAS_MPI       - True if ALPSCore is compiled with MPI enabled
#  ALPSCore_<c>_FOUND     - True if the requested component <c> is present
#  ALPSCore_<c>_LIBRARIES - The libraries (imported targets) for the component <c>

# FIXME: Is not affected by ALPSCore_LIBRARY variable

# Everything is hidden inside a function to avoid polluting the caller's scope
# This function sets in the parent scope:
#   ALPSCore_LIBRARIES 
#   ALPSCore_<c>_FOUND (for each component <c>) 
#   ALPSCore_<c>_LIBRARIES (for each component <c>) 
function(alpscore_config_main_)
    unset(cxx_features)
    if (DEFINED ALPS_FORCE_CXX_STD)
      if (ALPS_FORCE_CXX_STD MATCHES "^[Cc][+][+]11$")
        set(cxx_features "cxx_auto_type;cxx_constexpr")
        message(STATUS "ALPSCore will request C++11 features")
      elseif (ALPS_FORCE_CXX_STD MATCHES "^[Cc][+][+]14$")
        set(cxx_features "cxx_decltype_auto")
        message(STATUS "ALPSCore will request C++14 features")
      elseif (ALPS_FORCE_CXX_STD MATCHES "^custom$")
        set(cxx_features "")
        message("Caution: ALPSCore is forced to not request any specific C++ features from the compiler")
      else()
        message(FATAL_ERROR "ALPS_FORCE_CXX_STD is set to unknown value ${ALPS_FORCE_CXX_STD}")
      endif()
    endif()

    # Create a list of known components
    set(known_components_ @ALPS_KNOWN_COMPONENTS@)

    # if no components required - search for everything
    if (NOT ALPSCore_FIND_COMPONENTS)
        set(ALPSCore_FIND_COMPONENTS ${known_components_})
    endif()

    unset(ALPSCore_LIBRARIES)

    # check for each required component
    foreach(component_ ${ALPSCore_FIND_COMPONENTS})
        list(FIND known_components_ ${component_} component_idx_)
        if (component_idx_ EQUAL -1) 
            message(FATAL_ERROR "ALPSCore : Unknown component ${component_}")
        else()
            set(pkg_ alps-${component_})
            if (ALPSCore_FIND_REQUIRED_${component_} AND ALPSCore_FIND_REQUIRED)
                set(be_required_ REQUIRED)
            else()
                unset(be_required_)
            endif()
            find_package(${pkg_} QUIET ${be_required_} NO_MODULE 
                PATHS ${CMAKE_CURRENT_LIST_DIR}/../.. 
                NO_DEFAULT_PATH)
            if (${pkg_}_FOUND)
                set(ALPSCore_${component_}_FOUND true PARENT_SCOPE)
                set(ALPSCore_${component_}_LIBRARIES ${${pkg_}_LIBRARIES} PARENT_SCOPE)
                list(APPEND ALPSCore_LIBRARIES ${${pkg_}_LIBRARIES})

                if (ALPSCore_HAS_EIGEN_VERSION)
                  set(ALPSCore_HAS_EIGEN_VERSION ${ALPSCore_HAS_EIGEN_VERSION} PARENT_SCOPE)
                endif()
                
            endif()
        endif()
    endforeach()

    if (DEFINED cxx_features)
      foreach (tgt_ ${ALPSCore_LIBRARIES})
        if (TARGET ${tgt_})
          set_property(TARGET ${tgt_} PROPERTY INTERFACE_COMPILE_FEATURES ${cxx_features})
        endif()
      endforeach()
    endif()

    # Restore Boost version and location hints
    set(alps_BOOST_DIR_ @Boost_DIR@)
    set(alps_BOOST_ROOT_ @ALPSCore_BOOST_ROOT@)
    set(alps_BOOST_INCLUDEDIR_ @ALPSCore_BOOST_INCLUDEDIR@)
    set(alps_BOOST_LIBRARYDIR_ @ALPSCore_BOOST_LIBRARYDIR@)

    set(ALPSCore_BOOST_VERSION @ALPSCore_BOOST_VERSION@)
    set(ALPSCore_BOOST_VERSION ${ALPSCore_BOOST_VERSION} PARENT_SCOPE)

    if (BOOST_FOUND OR TARGET Boost::boost)
      message("Note: Boost seems to be searched and found before ALPSCore."
        " ALPSCore is unable to hint CMake to the locaton of Boost it was built with."
        " Make sure you are using the same version of Boost: ${ALPSCore_BOOST_VERSION}")
    else()
      
      foreach(varname_ Boost_DIR BOOST_ROOT BOOST_INCLUDEDIR BOOST_LIBRARYDIR)
        set(alps_var_ ${alps_${varname_}_})      
        set(client_var_ ${${varname_}})
        if (alps_var_)
          if (NOT client_var_ OR client_var_ STREQUAL alps_var_)
            set(${varname_} ${alps_var_} PARENT_SCOPE)
            message(STATUS "ALPSCore will hint CMake about Boost location: ${varname_}=${alps_var_}")
          else()
            message(WARNING "Variable ${varname_} is set to '${client_var_}', which is different"
              " from the value '${alps_var_}' used when building ALPSCore."
              " Make sure you are using the same version of Boost: ${ALPSCore_BOOST_VERSION}")
          endif()
        endif()
      endforeach()

    endif()
    
    set(ALPSCore_LIBRARIES ${ALPSCore_LIBRARIES} PARENT_SCOPE)
    set(ALPSCore_COMPONENTS ${ALPSCore_FIND_COMPONENTS} PARENT_SCOPE)
endfunction(alpscore_config_main_)


set(ALPSCore_CMAKE_MINIMUM_VERSION @ALPS_CMAKE_MINIMUM_VERSION@)
set(ALPSCore_CMAKE_MATCH true)
if (CMAKE_VERSION VERSION_LESS ALPSCore_CMAKE_MINIMUM_VERSION)
  message(WARNING "To use ALPScore CMake version ${ALPSCore_CMAKE_MINIMUM_VERSION} or later "
    "is required; this CMake version is ${CMAKE_VERSION}. "
    "You may use a newer CMake for your project, "
    "or try to rebuild ALPSCore with CMake version ${CMAKE_VERSION}.")
  set(ALPSCore_CMAKE_MATCH false)
endif()
    
set(ALPSCore_HAS_MPI @ALPS_HAVE_MPI@)
set(ALPSCore_CXX_STD "@ALPS_CXX_STD@")
set(ALPSCore_CXX_COMPILER_ID "@CMAKE_CXX_COMPILER_ID@")
set(ALPSCore_CXX_COMPILER_VERSION "@CMAKE_CXX_COMPILER_VERSION@")
if (ALPSCore_CXX_COMPILER_ID STREQUAL CMAKE_CXX_COMPILER_ID
    AND
    ALPSCore_CXX_COMPILER_VERSION VERSION_EQUAL CMAKE_CXX_COMPILER_VERSION)
  set(ALPSCore_COMPILER_MATCH true)
else()
  message(WARNING "The C++ compiler used to build your project should exactly match"
    " the C++ compiler that was used to build ALPSCore."
"
 ALPSCore C++ compiler ID: ${ALPSCore_CXX_COMPILER_ID}
 ALPSCore C++ compiler version: ${ALPSCore_CXX_COMPILER_VERSION}
 Current C++ compiler ID: ${CMAKE_CXX_COMPILER_ID}
 Current C++ compiler version: ${CMAKE_CXX_COMPILER_VERSION}
 Current C++ compiler: ${CMAKE_CXX_COMPILER}")
  if (ALPS_FORCE_NO_COMPILER_CHECK)
    message("WARNING: Compiler mismatch is ignored, as requested")
    set(ALPSCore_COMPILER_MATCH true)
  else()
    set(ALPSCore_COMPILER_MATCH false)
  endif()
endif()
if (ALPSCore_COMPILER_MATCH AND ALPSCore_CMAKE_MATCH)
  alpscore_config_main_()
endif()

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(ALPSCore REQUIRED_VARS ALPSCore_LIBRARIES ALPSCore_COMPILER_MATCH ALPSCore_CMAKE_MATCH HANDLE_COMPONENTS)
